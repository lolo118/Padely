    // Importar funciones de Firebase (Versión actualizada a 12.4.0)
    import { initializeApp } from "https://www.gstatic.com/firebasejs/12.4.0/firebase-app.js";
    import {
        getAuth,
        createUserWithEmailAndPassword,
        signInWithEmailAndPassword,
        signOut,
        onAuthStateChanged
    } from "https://www.gstatic.com/firebasejs/12.4.0/firebase-auth.js";
    import {
        getFirestore,
        collection,
        addDoc,
        getDocs,
        onSnapshot,
        query,
        where,
        doc,
        setDoc,
        deleteDoc
    } from "https://www.gstatic.com/firebasejs/12.4.0/firebase-firestore.js";
    
    document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM loaded, initializing app...'); // <-- Log inicial
    
        // =================================================================================
        // CONFIGURACIÓN E INICIALIZACIÓN DE FIREBASE
        // =================================================================================
        const firebaseConfig = {
          apiKey: "AIzaSyB4l7csqMhgXFJFQYsikA2z1zCWlkMGv_c", // Tus claves
          authDomain: "padely-fecf8.firebaseapp.com",
          projectId: "padely-fecf8",
          storageBucket: "padely-fecf8.appspot.com",
          messagingSenderId: "627231948848",
          appId: "1:627231948848:web:3ad20bb779b0e4fad2adf5",
          measurementId: "G-R6JD3V4KD9"
        };
    
        try {
            // Initialize Firebase
            const app = initializeApp(firebaseConfig);
            const auth = getAuth(app);
            const db = getFirestore(app);
            console.log("Firebase inicializado correctamente."); // <-- Log Firebase OK
        } catch (error) {
            console.error("ERROR inicializando Firebase:", error); // <-- Log Error Firebase
            alert("No se pudo conectar con Firebase. Algunas funciones pueden no estar disponibles.");
            // Considera detener la ejecución aquí o manejar el error de otra forma
            // return; 
        }
    
        // =================================================================================
        // ESTADO GLOBAL DE LA APLICACIÓN
        // =================================================================================
        let globalState = {
            currentUser: null,
            currentWizardData: {}
        };
    
        // =================================================================================
        // 1. NAVEGACIÓN Y LÓGICA DE UI GENERAL
        // =================================================================================
        console.log("Setting up UI listeners..."); // <-- Log antes de listeners
    
        const navLinks = document.querySelectorAll('.nav-link');
        const pages = document.querySelectorAll('.page-content');
        const menuToggle = document.getElementById('menu-toggle');
        const sidebar = document.getElementById('sidebar');
        const menuOverlay = document.getElementById('menu-overlay');
        const mobileHeaderTitle = document.getElementById('mobile-header-title');
        const quickActionBtn = document.getElementById('quick-action-btn');
    
        // --- Menú Móvil ---
        const toggleMenu = () => {
             if (sidebar) sidebar.classList.toggle('-translate-x-full');
             if (menuOverlay) menuOverlay.classList.toggle('hidden');
        };
        // Verificaciones añadidas antes de addEventListener
        if (menuToggle) {
             console.log("menuToggle found, adding listener.");
             menuToggle.addEventListener('click', toggleMenu);
        } else { console.error("menuToggle NOT FOUND"); }
        if (menuOverlay) {
             console.log("menuOverlay found, adding listener.");
             menuOverlay.addEventListener('click', toggleMenu);
        } else { console.error("menuOverlay NOT FOUND"); }
    
    
        // --- Navegación entre páginas ---
        if (navLinks.length > 0) {
            console.log(`Found ${navLinks.length} nav links, adding listeners.`);
            navLinks.forEach((link, index) => {
                link.addEventListener('click', (e) => {
                    console.log(`Nav link ${index+1} clicked.`); // <-- Log dentro del listener
                    e.preventDefault();
                    const pageId = link.dataset.page;
                    const pageTitleSpan = link.querySelector('span:not(.notification-dot)');
                    const pageTitle = pageTitleSpan ? pageTitleSpan.textContent.trim() : 'Padely';
    
                    pages.forEach(page => page.classList.add('hidden'));
                    const targetPage = document.getElementById(`page-${pageId}`);
                    if (targetPage) {
                        targetPage.classList.remove('hidden');
                    } else {
                        console.error(`Page with ID 'page-${pageId}' not found.`);
                        const homePage = document.getElementById('page-home');
                        if (homePage) homePage.classList.remove('hidden');
                    }
                    navLinks.forEach(nav => nav.classList.remove('active'));
                    link.classList.add('active');
    
                    if(mobileHeaderTitle) {
                         mobileHeaderTitle.textContent = pageTitle;
                    } else {
                        console.error("Element with ID 'mobile-header-title' not found.");
                    }
    
                    if (window.innerWidth < 1024) toggleMenu();
    
                    if (pageId === 'tournaments') {
                        showTournamentListView();
                    }
                });
            });
        } else { console.error("No nav links found!"); }
    
        // --- Botón de acción rápida ---
        if (quickActionBtn) {
             console.log("quickActionBtn found, adding listener.");
            quickActionBtn.addEventListener('click', () => {
                console.log("Quick action button clicked."); // <-- Log dentro del listener
                openModal(registerModal);
            });
        } else { console.error("quickActionBtn NOT FOUND"); }
    
        // --- Lógica de Modales (General) ---
        const loginModal = document.getElementById('login-modal');
        const registerModal = document.getElementById('register-modal');
        const wizardModal = document.getElementById('create-tournament-wizard');
        console.log("Modals:", { loginModal, registerModal, wizardModal }); // <-- Log para verificar modales
    
        function openModal(modal) { /* ... (código existente sin cambios) ... */ }
        function closeModal(modal) { /* ... (código existente sin cambios) ... */ }
    
        const loginBtnEl = document.getElementById('login-btn');
        if (loginBtnEl) {
             console.log("loginBtnEl found, adding listener.");
             loginBtnEl.addEventListener('click', () => { console.log("Login button clicked."); openModal(loginModal); });
        } else { console.error("loginBtnEl NOT FOUND"); }
        
        const registerBtnEl = document.getElementById('register-btn');
        if (registerBtnEl) {
             console.log("registerBtnEl found, adding listener.");
             registerBtnEl.addEventListener('click', () => { console.log("Register button clicked."); openModal(registerModal); });
        } else { console.error("registerBtnEl NOT FOUND"); }
        
        const createBtn = document.getElementById('create-tournament-btn');
        if (createBtn) {
             console.log("createBtn found, adding listener.");
             createBtn.addEventListener('click', () => { console.log("Create tournament button clicked."); openModal(wizardModal); });
        } else { console.warn("create-tournament-btn NOT FOUND (expected if not on tournaments page)"); } // Warn instead of error
        
        const addCardBtn = document.getElementById('add-tournament-card');
        if (addCardBtn) {
            console.log("addCardBtn found, adding listener.");
            addCardBtn.addEventListener('click', () => { console.log("Add tournament card clicked."); openModal(wizardModal); });
        } else { console.warn("add-tournament-card NOT FOUND (expected if not on tournaments page)"); }
    
        document.querySelectorAll('.close-modal-btn, #close-wizard-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const modal = btn.closest('.modal-overlay, #create-tournament-wizard');
                console.log("Close button clicked for modal:", modal?.id); // <-- Log cierre
                closeModal(modal);
            });
        });
    
        document.querySelectorAll('.modal-overlay, #create-tournament-wizard').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                     console.log("Overlay clicked for modal:", modal.id); // <-- Log cierre overlay
                    closeModal(modal);
                }
            });
        });
    
        const switchToRegisterBtn = document.getElementById('switch-to-register');
        if (switchToRegisterBtn) {
            console.log("switchToRegisterBtn found, adding listener.");
            switchToRegisterBtn.addEventListener('click', (e) => {
                e.preventDefault();
                console.log("Switch to register clicked."); // <-- Log switch
                closeModal(loginModal);
                openModal(registerModal);
            });
        } else { console.error("switch-to-register NOT FOUND"); }
    
        // --- Lógica del Modal de Registro por Roles ---
        const roleSelectionStep = document.getElementById('role-selection-step');
        const formSteps = document.getElementById('form-steps');
        const backToRolesBtn = document.querySelector('.back-to-roles');
    
        if (roleSelectionStep) { /* ... (código existente sin cambios) ... */ }
         if(backToRolesBtn) { /* ... (código existente sin cambios) ... */ }
         const registerCloseBtn = document.querySelector('#register-modal .close-modal-btn');
         if (registerCloseBtn) { /* ... (código existente sin cambios) ... */ }
    
        // --- Mostrar/ocultar contraseña ---
        const togglePassword = document.getElementById('toggle-password');
        if (togglePassword) { /* ... (código existente sin cambios) ... */ }
    
        // --- Lógica de Autenticación UI ---
        const userProfile = document.getElementById('user-profile');
        const userInitials = document.getElementById('user-initials');
        const userNameEl = document.getElementById('user-name');
        const userRoleEl = document.getElementById('user-role');
        const registerBtn = document.getElementById('register-btn');
        const loginBtn = document.getElementById('login-btn'); // Renombrado para consistencia
        const logoutBtn = document.getElementById('logout-btn');
    
        function updateAuthUI() { /* ... (código existente sin cambios, usa registerBtn y loginBtn) ... */ }
        
        if(logoutBtn) { /* ... (código existente sin cambios) ... */ }
    
        // --- Inicialización de gráficos ---
        function initializeCharts() {
            console.log("Initializing charts..."); // <-- Log Chart Init
            // CORREGIDO: getContext('2d')
            const tournamentCtx = document.getElementById('tournamentChart')?.getContext('2d');
            if (!tournamentCtx) {
                 console.warn("tournamentChart canvas NOT FOUND."); // <-- Log si no encuentra canvas
                 return;
            }
            console.log("tournamentChart canvas found."); // <-- Log si encuentra canvas
            
            if (window.padelyTournamentChart instanceof Chart) {
                window.padelyTournamentChart.destroy();
            }
    
            try { // Añadir try-catch por si falla Chart.js
                window.padelyTournamentChart = new Chart(tournamentCtx, {
                    type: 'doughnut', data: { labels: ['Activos', 'Finalizados', 'Próximos'], datasets: [{ data: [8, 24, 5], backgroundColor: ['#ef4444', '#3b82f6', '#10b981'], borderWidth: 0, hoverOffset: 10 }] },
                    options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom', labels: { color: '#d1d5db', padding: 20, usePointStyle: true, font: { family: 'Inter' } } } }, cutout: '70%' }
                });
                console.log("Chart initialized successfully."); // <-- Log Chart OK
            } catch (error) {
                console.error("ERROR initializing Chart.js:", error); // <-- Log Error Chart
            }
         }
    
        // --- Simulación de login (Reemplazar con Firebase Auth) ---
         const loginForm = document.getElementById('login-form');
         if (loginForm) {
              console.log("loginForm found, adding listener.");
              loginForm.addEventListener('submit', function(e) { /* ... (código existente sin cambios) ... */ });
         } else { console.error("loginForm NOT FOUND"); }
          
    
         // =================================================================================
        // 3. MÓDULO DE CREACIÓN DE TORNEOS (WIZARD)
        // =================================================================================
        console.log("Setting up tournament wizard module..."); // <-- Log Wizard Init
        const tournamentListPage = document.getElementById('tournament-list-view');
        //const backToListBtn = document.getElementById('back-to-list-btn'); // REMOVED
        const wizardSteps = wizardModal?.querySelectorAll('.wizard-step');
        const progressBar = document.getElementById('wizard-progress');
        const modalityCards = wizardModal?.querySelectorAll('.modality-card');
        let currentStep = 1;
        const totalSteps = wizardSteps ? wizardSteps.length : 0;
        const currentStepIndicator = document.getElementById('current-step-indicator');
        const wizardPrevBtn = wizardModal?.querySelector('.wizard-prev');
        const wizardNextBtn = wizardModal?.querySelector('.wizard-next');
        const wizardFinishBtn = document.getElementById('wizard-finish');
        console.log("Wizard elements:", { wizardModal, wizardSteps, wizardPrevBtn, wizardNextBtn, wizardFinishBtn }); // <-- Log elementos Wizard
    
        function showWizardStep(stepNumber) { /* ... (código existente sin cambios) ... */ }
        function showTournamentListView() { /* ... (código existente sin cambios) ... */ }
    
        if(wizardModal) {
            if(wizardNextBtn) {
                 console.log("wizardNextBtn found, adding listener.");
                 wizardNextBtn.addEventListener('click', () => { /* ... (código existente sin cambios) ... */ });
            } else { console.error("wizardNextBtn NOT FOUND in wizard modal"); }
    
            if(wizardPrevBtn) {
                 console.log("wizardPrevBtn found, adding listener.");
                 wizardPrevBtn.addEventListener('click', () => { /* ... (código existente sin cambios) ... */ });
            } else { console.error("wizardPrevBtn NOT FOUND in wizard modal"); }
            
             if (modalityCards && modalityCards.length > 0) {
                 console.log(`Found ${modalityCards.length} modality cards, adding listeners.`);
                 modalityCards.forEach(card => { /* ... (código existente sin cambios) ... */ });
             } else { console.error("No modality cards found in wizard modal!"); }
    
            function collectWizardStepData(step) { /* ... (código existente sin cambios) ... */ }
            function updateFormatOptionsVisibility() { /* ... (código existente sin cambios) ... */ }
            function generateWizardSummary() { /* ... (código existente sin cambios) ... */ }
            async function saveTournamentToFirestore() { /* ... (código existente sin cambios) ... */ }
    
            const finishBtn = document.getElementById('wizard-finish'); // Re-get specifically for listener
             if (finishBtn) {
                  console.log("wizardFinishBtn found, adding listener.");
                 finishBtn.addEventListener('click', async () => {
                    await saveTournamentToFirestore();
                });
             } else { console.error("wizardFinishBtn NOT FOUND in wizard modal"); }
        } else {
             console.error("Wizard Modal (create-tournament-wizard) NOT FOUND!");
        }
    
        // =================================================================================
        // INICIALIZACIÓN FINAL
        // =================================================================================
        console.log("Running final initializations..."); // <-- Log Final Init
        updateAuthUI();
        showTournamentListView();
        console.log("App initialization complete."); // <-- Log App Ready
    
    }); // <-- ESTE CIERRE ES CRUCIAL Y ESTÁ PRESENTE
    
    

