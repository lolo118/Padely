// Importar funciones de Firebase (Correcto - Mantener al inicio)
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js"; // Asegúrate que la versión sea la más reciente si Firebase te dio otra
import {
    getAuth,
    createUserWithEmailAndPassword,
    signInWithEmailAndPassword,
    signOut,
    onAuthStateChanged
} from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
import {
    getFirestore,
    collection, // Needed for collection reference
    addDoc,     // Needed to add new documents
    getDocs,
    onSnapshot,
    query,
    where,
    doc,
    setDoc,
    deleteDoc
} from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";
// (Si Firebase te dio una versión más nueva como 12.4.0 en el snippet, actualiza las URLs de arriba también)


document.addEventListener('DOMContentLoaded', function() {

    // =================================================================================
    // CONFIGURACIÓN E INICIALIZACIÓN DE FIREBASE (Corregido)
    // =================================================================================
    // Your web app's Firebase configuration (Pega tu configuración aquí)
    const firebaseConfig = {
      apiKey: "AIzaSyB4l7csqMhgXFJFQYsikA2z1zCWlkMGv_c", // Asegúrate que esta sea tu clave real
      authDomain: "padely-fecf8.firebaseapp.com",
      projectId: "padely-fecf8",
      storageBucket: "padely-fecf8.appspot.com", // Corregido: suele terminar en .appspot.com
      messagingSenderId: "627231948848",
      appId: "1:627231948848:web:3ad20bb779b0e4fad2adf5",
      measurementId: "G-R6JD3V4KD9" // Opcional para Analytics
    };

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app); // Referencia a Authentication
    const db = getFirestore(app); // Referencia a Firestore
    // const analytics = getAnalytics(app); // Descomenta si necesitas Analytics

    console.log("Firebase inicializado correctamente.");

    // =================================================================================
    // ESTADO GLOBAL DE LA APLICACIÓN
    // =================================================================================
    let globalState = {
        currentUser: null,
        currentWizardData: {} 
    };

    // =================================================================================
    // 1. NAVEGACIÓN Y LÓGICA DE UI GENERAL
    // =================================================================================
    const navLinks = document.querySelectorAll('.nav-link');
    const pages = document.querySelectorAll('.page-content');
    const menuToggle = document.getElementById('menu-toggle');
    const sidebar = document.getElementById('sidebar');
    const menuOverlay = document.getElementById('menu-overlay');
    const mobileHeaderTitle = document.getElementById('mobile-header-title');
    const quickActionBtn = document.getElementById('quick-action-btn');

    // --- Menú Móvil ---
    const toggleMenu = () => {
        sidebar.classList.toggle('-translate-x-full');
        menuOverlay.classList.toggle('hidden');
    };
    menuToggle.addEventListener('click', toggleMenu);
    menuOverlay.addEventListener('click', toggleMenu);

    // --- Navegación entre páginas ---
    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const pageId = link.dataset.page;
            const pageTitleSpan = link.querySelector('span:not(.notification-dot)');
            const pageTitle = pageTitleSpan ? pageTitleSpan.textContent.trim() : 'Padely'; 
            
            pages.forEach(page => page.classList.add('hidden'));
            const targetPage = document.getElementById(`page-${pageId}`);
            if (targetPage) { 
                targetPage.classList.remove('hidden');
            } else {
                console.error(`Page with ID 'page-${pageId}' not found.`);
                const homePage = document.getElementById('page-home'); 
                if (homePage) homePage.classList.remove('hidden'); 
            }
            navLinks.forEach(nav => nav.classList.remove('active'));
            link.classList.add('active');
            
            if(mobileHeaderTitle) {
                 mobileHeaderTitle.textContent = pageTitle;
            } else {
                console.error("Element with ID 'mobile-header-title' not found.");
            }

            if (window.innerWidth < 1024) toggleMenu();

            if (pageId === 'tournaments') {
                showTournamentListView(); 
            }
        });
    });
    
    // --- Botón de acción rápida ---
    quickActionBtn.addEventListener('click', () => {
        openModal(registerModal); // Reutilizar openModal
    });
    
    // --- Lógica de Modales (General) ---
    const loginModal = document.getElementById('login-modal');
    const registerModal = document.getElementById('register-modal');
    const wizardModal = document.getElementById('create-tournament-wizard'); // Wizard Modal
    
    function openModal(modal) {
        if (!modal) return;
        modal.classList.remove('hidden');
        setTimeout(() => {
            const card = modal.querySelector('.glass-card');
            if (card) card.classList.remove('scale-95');
        }, 10);
        
         // Resetear wizard al abrir
         if (modal.id === 'create-tournament-wizard') {
            currentStep = 1;
            globalState.currentWizardData = {};
            showWizardStep(currentStep);
            if(modalityCards) modalityCards.forEach(card => card.classList.remove('selected'));
             // Resetear formularios dentro del wizard
             modal.querySelectorAll('input[type="text"], input[type="number"], input[type="date"], input[type="datetime-local"], textarea').forEach(input => input.value = '');
             modal.querySelectorAll('input[type="checkbox"], input[type="radio"]').forEach(input => input.checked = false);
             modal.querySelectorAll('select').forEach(select => select.selectedIndex = 0);
             updateFormatOptionsVisibility(); // Asegurar que las opciones de formato estén ocultas/mostradas correctamente al inicio
        }
    }

    function closeModal(modal) {
         if (!modal) return;
         const card = modal.querySelector('.glass-card');
         if (card) card.classList.add('scale-95');
         setTimeout(() => { modal.classList.add('hidden'); }, 300);
    }

    document.getElementById('login-btn').addEventListener('click', () => openModal(loginModal));
    document.getElementById('register-btn').addEventListener('click', () => openModal(registerModal));
    document.getElementById('create-tournament-btn').addEventListener('click', () => openModal(wizardModal)); 
    document.getElementById('add-tournament-card').addEventListener('click', () => openModal(wizardModal)); 

    document.querySelectorAll('.close-modal-btn, #close-wizard-btn').forEach(btn => { 
        btn.addEventListener('click', () => {
            const modal = btn.closest('.modal-overlay, #create-tournament-wizard'); 
            closeModal(modal);
        });
    });

    document.querySelectorAll('.modal-overlay, #create-tournament-wizard').forEach(modal => { 
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal(modal);
            }
        });
    });
    
    const switchToRegisterBtn = document.getElementById('switch-to-register');
    if (switchToRegisterBtn) {
        switchToRegisterBtn.addEventListener('click', (e) => {
            e.preventDefault();
            closeModal(loginModal);
            openModal(registerModal);
        });
    }
    
    // --- Lógica del Modal de Registro por Roles ---
    const roleSelectionStep = document.getElementById('role-selection-step');
    const formSteps = document.getElementById('form-steps');
    const backToRolesBtn = document.querySelector('.back-to-roles');
    
    if (roleSelectionStep) {
        roleSelectionStep.querySelectorAll('.role-card').forEach(card => {
            card.addEventListener('click', () => {
                const role = card.dataset.role;
                roleSelectionStep.classList.add('hidden');
                if (formSteps) formSteps.classList.remove('hidden');
                document.querySelectorAll('.register-form').forEach(form => form.classList.add('hidden'));
                const targetForm = document.getElementById(`register-form-${role}`);
                 if (targetForm) targetForm.classList.remove('hidden');
            });
        });
    }

     if(backToRolesBtn) { 
        backToRolesBtn.addEventListener('click', () => {
            if (formSteps) formSteps.classList.add('hidden');
            if (roleSelectionStep) roleSelectionStep.classList.remove('hidden');
        });
     }

     const registerCloseBtn = document.querySelector('#register-modal .close-modal-btn');
     if (registerCloseBtn) {
         registerCloseBtn.addEventListener('click', () => {
             setTimeout(() => {
                if (formSteps) formSteps.classList.add('hidden');
                if (roleSelectionStep) roleSelectionStep.classList.remove('hidden');
             }, 300); // Resetear a la selección de rol al cerrar
        });
     }

    // --- Mostrar/ocultar contraseña ---
    const togglePassword = document.getElementById('toggle-password');
    if (togglePassword) { 
        togglePassword.addEventListener('click', function() {
            const passwordInput = document.getElementById('password');
            if (passwordInput) { // Verificar si el input existe
                const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                passwordInput.setAttribute('type', type);
                const icon = this.querySelector('i');
                if (icon) {
                    icon.classList.toggle('fa-eye');
                    icon.classList.toggle('fa-eye-slash');
                }
            }
        });
     }

    // --- Lógica de Autenticación UI ---
    const userProfile = document.getElementById('user-profile');
    const userInitials = document.getElementById('user-initials');
    const userNameEl = document.getElementById('user-name');
    const userRoleEl = document.getElementById('user-role');
    const registerBtn = document.getElementById('register-btn');
    const loginBtn = document.getElementById('login-btn');
    const logoutBtn = document.getElementById('logout-btn');

    function updateAuthUI() { 
        if (globalState.currentUser) {
            if(userProfile) userProfile.classList.replace('hidden', 'flex'); 
            if(registerBtn) registerBtn.classList.add('hidden');
            if(loginBtn) loginBtn.classList.add('hidden');
            if(logoutBtn) logoutBtn.classList.remove('hidden');

            if(userNameEl) userNameEl.textContent = globalState.currentUser.name;
            if(userRoleEl) userRoleEl.textContent = globalState.currentUser.role;
            if(userInitials) {
                const nameParts = globalState.currentUser.name.split(' ');
                let initials = nameParts.length > 0 ? nameParts[0].charAt(0) : '?'; 
                if (nameParts.length > 1) {
                    initials += nameParts[nameParts.length - 1].charAt(0);
                }
                userInitials.textContent = initials.toUpperCase();
            }
        } else {
            if(userProfile) userProfile.classList.replace('flex', 'hidden');
            if(registerBtn) registerBtn.classList.remove('hidden');
            if(loginBtn) loginBtn.classList.remove('hidden');
            if(logoutBtn) logoutBtn.classList.add('hidden');
        }
     }
    
    if(logoutBtn) { 
        logoutBtn.addEventListener('click', () => {
            // *** TODO: Implementar Firebase Sign Out ***
            // signOut(auth).then(() => {
            //     globalState.currentUser = null;
            //     updateAuthUI();
            //     console.log("Sesión cerrada");
            // }).catch((error) => {
            //     console.error("Error al cerrar sesión:", error);
            // });
            // *** Simulación por ahora ***
            globalState.currentUser = null; 
            updateAuthUI();
             const tournamentPage = document.getElementById('page-tournaments');
             if (tournamentPage && !tournamentPage.classList.contains('hidden')) {
                 showTournamentListView(); 
             }
        });
     }

    // --- Inicialización de gráficos ---
    function initializeCharts() { 
        const tournamentCtx = document.getElementById('tournamentChart')?.getContext('2d');
        if (!tournamentCtx) return; 
        
        if (window.padelyTournamentChart instanceof Chart) {
            window.padelyTournamentChart.destroy();
        }

        window.padelyTournamentChart = new Chart(tournamentCtx, { 
            type: 'doughnut', data: { labels: ['Activos', 'Finalizados', 'Próximos'], datasets: [{ data: [8, 24, 5], backgroundColor: ['#ef4444', '#3b82f6', '#10b981'], borderWidth: 0, hoverOffset: 10 }] },
            options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom', labels: { color: '#d1d5db', padding: 20, usePointStyle: true, font: { family: 'Inter' } } } }, cutout: '70%' }
        });
     }

    // --- Simulación de login (Reemplazar con Firebase Auth) ---
     const loginForm = document.getElementById('login-form');
     if (loginForm) { 
         loginForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const usernameInput = document.getElementById('username');
            const passwordInput = document.getElementById('password');
            const errorElement = document.getElementById('login-error');
            
            const email = usernameInput ? usernameInput.value : ''; // Asumir email
            const password = passwordInput ? passwordInput.value : '';

            // *** TODO: Implementar Firebase Sign In ***
            // signInWithEmailAndPassword(auth, email, password)
            //   .then((userCredential) => {
            //     // Signed in 
            //     const user = userCredential.user;
            //     globalState.currentUser = { name: user.email, role: 'Jugador', uid: user.uid }; // Guardar UID
            //     updateAuthUI();
            //     closeModal(loginModal);
            //     if (errorElement) errorElement.classList.add('hidden');
            //   })
            //   .catch((error) => {
            //     console.error("Error de login:", error.code, error.message);
            //     if (errorElement) errorElement.textContent = "Email o contraseña incorrectos.";
            //     if (errorElement) errorElement.classList.remove('hidden');
            //   });

             // *** Simulación por ahora ***
            if (email && password) {
                 globalState.currentUser = { name: email, role: 'Jugador' }; // Simular rol
                 updateAuthUI();
                 closeModal(loginModal);
             } else {
                 if (errorElement) errorElement.textContent = "Credenciales incorrectas.";
                  if (errorElement) errorElement.classList.remove('hidden');
                 setTimeout(() => { if (errorElement) errorElement.classList.add('hidden'); }, 3000);
             }
        });
      }
      
      // *** TODO: Añadir listener onAuthStateChanged para manejar estado de auth ***
      // onAuthStateChanged(auth, (user) => {
      //   if (user) {
      //     // User is signed in, see docs for a list of available properties
      //     // https://firebase.google.com/docs/reference/js/auth.user
      //     console.log("Usuario conectado:", user);
      //     globalState.currentUser = { name: user.email || 'Usuario', role: 'Jugador', uid: user.uid }; // Obtener datos del user object
      //     updateAuthUI();
      //   } else {
      //     // User is signed out
      //     console.log("Usuario desconectado");
      //     globalState.currentUser = null;
      //     updateAuthUI();
      //   }
      // });
      

     // =================================================================================
    // 3. MÓDULO DE CREACIÓN DE TORNEOS (WIZARD)
    // =================================================================================
    const tournamentListPage = document.getElementById('tournament-list-view');
    const backToListBtn = document.getElementById('back-to-list-btn'); // Botón dentro del wizard modal
    const wizardSteps = wizardModal?.querySelectorAll('.wizard-step');
    const progressBar = document.getElementById('wizard-progress');
    const modalityCards = wizardModal?.querySelectorAll('.modality-card');
    let currentStep = 1;
    const totalSteps = wizardSteps ? wizardSteps.length : 0;
    const currentStepIndicator = document.getElementById('current-step-indicator');
    const wizardPrevBtn = wizardModal?.querySelector('.wizard-prev');
    const wizardNextBtn = wizardModal?.querySelector('.wizard-next');
    const wizardFinishBtn = document.getElementById('wizard-finish');

    function showWizardStep(stepNumber) {
         if (!wizardSteps || wizardSteps.length === 0 || stepNumber < 1 || stepNumber > totalSteps) return; 
        wizardSteps.forEach(step => step.classList.remove('active'));
        const nextStep = document.getElementById(`step-${stepNumber}`);
        if (nextStep) {
            nextStep.classList.add('active');
            currentStep = stepNumber;
            const progressPercentage = ((currentStep -1) / (totalSteps -1)) * 100; 
             if(progressBar) progressBar.style.width = `${progressPercentage}%`;
             if(currentStepIndicator) currentStepIndicator.textContent = `Paso ${currentStep} / ${totalSteps}`;

             if(wizardPrevBtn) wizardPrevBtn.disabled = currentStep === 1;
             if(wizardNextBtn) wizardNextBtn.classList.toggle('hidden', currentStep === totalSteps);
             if(wizardFinishBtn) wizardFinishBtn.classList.toggle('hidden', currentStep !== totalSteps);

             if (currentStep === 3) updateFormatOptionsVisibility();
             if (currentStep === 5) generateWizardSummary();
        }
    }
    
    function showTournamentListView() {
         if(tournamentListPage) {
             initializeCharts(); 
         }
    }

    if(wizardModal) {
        if(wizardNextBtn) {
            wizardNextBtn.addEventListener('click', () => {
                 if (currentStep < totalSteps) {
                     const currentStepElement = document.getElementById(`step-${currentStep}`);
                     if (currentStepElement) {
                        // --- VALIDACIONES ---
                        if (currentStep === 1 && !globalState.currentWizardData.modality) {
                            alert("Por favor, selecciona una modalidad."); return; 
                        }
                        if (currentStep === 2) {
                            const nameInput = document.getElementById('wizard-tournament-name');
                            const startInput = document.getElementById('wizard-start-datetime');
                            const branchCheckboxes = document.querySelectorAll('input[name="branch"]:checked');
                            const categoryCheckboxes = document.querySelectorAll('.category-checkbox:checked');

                            if (!nameInput?.value) { alert("Por favor, ingresa el nombre del torneo."); return; }
                            if (!startInput?.value) { alert("Por favor, selecciona la fecha y hora de inicio."); return; }
                            if (branchCheckboxes.length === 0) { alert("Por favor, selecciona al menos una rama (Masculino, Femenino o Mixto)."); return; }
                            if (categoryCheckboxes.length === 0) { alert("Por favor, selecciona al menos una categoría."); return; }
                        }
                        // --- FIN VALIDACIONES ---
                        collectWizardStepData(currentStep); 
                     }
                     showWizardStep(currentStep + 1);
                 }
            });
        }

        if(wizardPrevBtn) {
            wizardPrevBtn.addEventListener('click', () => {
                 if (currentStep > 1) {
                     showWizardStep(currentStep - 1);
                 }
            });
        }
        
         if (modalityCards) {
             modalityCards.forEach(card => {
                card.addEventListener('click', () => {
                    modalityCards.forEach(c => c.classList.remove('selected'));
                    card.classList.add('selected');
                    globalState.currentWizardData.modality = card.dataset.modality;
                     const modalityLabel = document.getElementById('selected-modality-label');
                     if(modalityLabel) {
                         const h4 = card.querySelector('h4');
                         modalityLabel.textContent = h4 ? h4.textContent : ''; // Handle potential null h4
                     }
                });
            });
         }

        // Función para recopilar datos del paso actual
        function collectWizardStepData(step) {
            const stepElement = document.getElementById(`step-${step}`);
            if (!stepElement) return;

            if (step === 2) { // Detalles Básicos
                 globalState.currentWizardData['tournament-name'] = document.getElementById('wizard-tournament-name')?.value || '';
                 globalState.currentWizardData['start-datetime'] = document.getElementById('wizard-start-datetime')?.value || '';
                 globalState.currentWizardData['end-datetime'] = document.getElementById('wizard-end-datetime')?.value || '';
                 globalState.currentWizardData['location'] = document.getElementById('wizard-location')?.value || '';
                 globalState.currentWizardData['branches'] = Array.from(document.querySelectorAll('input[name="branch"]:checked')).map(cb => cb.value); // Recolectar ramas
                 globalState.currentWizardData['categories'] = Array.from(document.querySelectorAll('.category-checkbox:checked')).map(cb => cb.value);
            } else if (step === 3) { // Formato
                globalState.currentWizardData['format-sets-best-of'] = document.getElementById('format-sets-best-of')?.value || '';
                globalState.currentWizardData['format-tiebreak'] = document.getElementById('format-tiebreak')?.value || '';
                globalState.currentWizardData['format-punto-oro'] = document.getElementById('format-punto-oro')?.checked || false;

                // Recolectar opciones específicas
                const modality = globalState.currentWizardData.modality;
                if (modality === 'americano') {
                    globalState.currentWizardData['format-americano-duration'] = document.getElementById('format-americano-duration')?.value || '15';
                    globalState.currentWizardData['format-americano-teams-per-court'] = document.getElementById('format-americano-teams-per-court')?.value || '4';
                } else if (modality === 'roundrobin') {
                    globalState.currentWizardData['format-rr-teams-per-group'] = document.getElementById('format-rr-teams-per-group')?.value || '4';
                    globalState.currentWizardData['format-rr-teams-qualify'] = document.getElementById('format-rr-teams-qualify')?.value || '2';
                } else if (modality === 'liga') {
                    globalState.currentWizardData['format-liga-win-points'] = document.getElementById('format-liga-win-points')?.value || '3';
                    globalState.currentWizardData['format-liga-draw-points'] = document.getElementById('format-liga-draw-points')?.value || '1';
                    globalState.currentWizardData['format-liga-loss-points'] = document.getElementById('format-liga-loss-points')?.value || '0';
                } else if (modality === 'eliminatoria') {
                    globalState.currentWizardData['eliminatoria-consuelo'] = document.getElementById('eliminatoria-consuelo')?.checked || false;
                } else if (modality === 'pozo') {
                     globalState.currentWizardData['format-pozo-courts'] = document.getElementById('format-pozo-courts')?.value || '4';
                }

            } else if (step === 4) { // Reglas Adicionales
                 globalState.currentWizardData['price'] = document.getElementById('wizard-price')?.value || '0';
                 globalState.currentWizardData['deadline'] = document.getElementById('wizard-deadline')?.value || '';
                 globalState.currentWizardData['tiebreak'] = document.getElementById('wizard-tiebreak')?.value || '';
            }
             
        }

         // Función para actualizar visibilidad de opciones de formato en Paso 3
         function updateFormatOptionsVisibility() {
             const container = document.getElementById('format-options-container');
             if (!container) return;
             const modality = globalState.currentWizardData.modality;
             const placeholder = document.getElementById('no-options-placeholder');
             
             container.querySelectorAll('[data-modality-options]').forEach(el => el.classList.add('hidden'));
             
             if (modality) {
                 const optionsDiv = container.querySelector(`[data-modality-options="${modality}"]`);
                 if (optionsDiv) {
                     optionsDiv.classList.remove('hidden');
                     if (placeholder) placeholder.classList.add('hidden');
                 } else {
                      if (placeholder) placeholder.classList.remove('hidden'); 
                 }
             } else {
                 if (placeholder) placeholder.classList.remove('hidden'); 
             }
         }

         // Función para generar el resumen en Paso 5
         function generateWizardSummary() {
             const summaryContainer = document.getElementById('wizard-summary');
             if (!summaryContainer) return;
             
             collectWizardStepData(4); 
             collectWizardStepData(3);
             
             summaryContainer.innerHTML = ''; 
             
             const data = globalState.currentWizardData;
             let summaryHtml = '<ul class="space-y-2 text-gray-300">';
             
             const getModalityName = () => {
                 const card = document.querySelector(`.modality-card[data-modality="${data.modality}"] h4`);
                 return card ? card.textContent : data.modality;
             }
             const formatTime = (isoString) => isoString ? new Date(isoString).toLocaleString('es-AR', { dateStyle: 'short', timeStyle: 'short'}) : 'N/A';
             const formatDate = (isoString) => isoString ? new Date(isoString + 'T00:00:00').toLocaleDateString('es-AR') : 'N/A';
             const getBoolLabel = (value) => value ? '<span class="text-green-400">Sí</span>' : '<span class="text-red-400">No</span>'; 

             summaryHtml += `<li class="font-bold text-white border-b border-gray-700 pb-2">I. Configuración General:</li>`;
             if (data.modality) summaryHtml += `<li class="ml-4">Modalidad: <span class="text-green-400 font-medium">${getModalityName()}</span></li>`; 
             if (data['tournament-name']) summaryHtml += `<li class="ml-4">Nombre: ${data['tournament-name']}</li>`;
             if (data['start-datetime']) summaryHtml += `<li class="ml-4">Inicio: ${formatTime(data['start-datetime'])}</li>`;
             if (data['end-datetime']) summaryHtml += `<li class="ml-4">Fin: ${formatTime(data['end-datetime'])}</li>`;
             if (data.location) summaryHtml += `<li class="ml-4">Lugar: ${data.location}</li>`;
             if (data.branches && data.branches.length > 0) summaryHtml += `<li class="ml-4">Ramas: ${data.branches.map(b => b.charAt(0).toUpperCase() + b.slice(1)).join(', ')}</li>`;
             if (data.categories && data.categories.length > 0) summaryHtml += `<li class="ml-4">Categorías: ${data.categories.join(', ')}</li>`;

             summaryHtml += `<li class="font-bold text-white border-b border-gray-700 py-2 mt-4">II. Formato de Partido:</li>`;
             summaryHtml += `<li class="ml-4">Sets/Partido: ${data['format-sets-best-of']}</li>`;
             summaryHtml += `<li class="ml-4">Tie-break: ${data['format-tiebreak']}</li>`;
             summaryHtml += `<li class="ml-4">Punto de Oro: ${getBoolLabel(data['format-punto-oro'])}</li>`;
             
             summaryHtml += `<li class="font-bold text-white border-b border-gray-700 py-2 mt-4">III. Reglas Específicas (${getModalityName()}):</li>`;
             
             if (data.modality === 'americano') {
                summaryHtml += `<li class="ml-4">Duración Ronda: ${data['format-americano-duration']} min.</li>`;
                summaryHtml += `<li class="ml-4">Parejas/Cancha: ${data['format-americano-teams-per-court']}</li>`;
             } else if (data.modality === 'roundrobin') {
                summaryHtml += `<li class="ml-4">Equipos/Grupo: ${data['format-rr-teams-per-group']}</li>`;
                summaryHtml += `<li class="ml-4">Clasifican: ${data['format-rr-teams-qualify']}</li>`;
             } else if (data.modality === 'liga') {
                summaryHtml += `<li class="ml-4">Puntos (V/E/D): ${data['format-liga-win-points']} / ${data['format-liga-draw-points']} / ${data['format-liga-loss-points']}</li>`;
             } else if (data.modality === 'eliminatoria') {
                summaryHtml += `<li class="ml-4">Torneo Consuelo: ${getBoolLabel(data['eliminatoria-consuelo'])}</li>`;
             } else if (data.modality === 'pozo') {
                summaryHtml += `<li class="ml-4">Máx. Canchas: ${data['format-pozo-courts']}</li>`;
             } else {
                 summaryHtml += `<li class="ml-4 text-gray-500">No hay reglas específicas para esta modalidad o Personalizado.</li>`;
             }

             summaryHtml += `<li class="font-bold text-white border-b border-gray-700 py-2 mt-4">IV. Inscripción y Otros:</li>`;
             summaryHtml += `<li class="ml-4">Precio: ${data.price === '0' || !data.price ? 'Gratis' : `$${data.price}`}</li>`; 
             summaryHtml += `<li class="ml-4">Cierre Inscripción: ${formatDate(data.deadline)}</li>`;
             if (data.tiebreak) summaryHtml += `<li class="ml-4">Desempate: ${data.tiebreak}</li>`;

             summaryHtml += '</ul>';
             summaryContainer.innerHTML = summaryHtml;
         }
        
         // --- Guardar Torneo en Firestore ---
         async function saveTournamentToFirestore() {
            // Recopilar datos de los últimos pasos (si no se hizo ya)
            collectWizardStepData(4);
            collectWizardStepData(3);
            
            const tournamentData = { ...globalState.currentWizardData }; // Copiar los datos del wizard

            // Añadir metadatos (ejemplo: fecha de creación, creador si estuviera logueado)
            tournamentData.createdAt = new Date().toISOString(); 
            // tournamentData.createdBy = globalState.currentUser?.uid || 'anonymous'; // Descomentar cuando tengamos login real

            try {
                // Referencia a la colección 'tournaments'
                const tournamentsCol = collection(db, "tournaments");
                
                // Añadir el documento a Firestore
                const docRef = await addDoc(tournamentsCol, tournamentData);
                
                console.log("Torneo guardado con ID: ", docRef.id);
                alert(`¡Torneo "${tournamentData['tournament-name'] || 'Sin Nombre'}" creado y guardado exitosamente!`);
                
                closeModal(wizardModal); // Cerrar el modal después de guardar
                // Opcional: Recargar la lista de torneos (lo haremos en el siguiente paso)
                // loadTournamentsFromFirestore(); 

            } catch (error) {
                console.error("Error al guardar el torneo en Firestore: ", error);
                alert("Error al guardar el torneo. Por favor, inténtalo de nuevo.");
            }
         }

        const finishBtn = document.getElementById('wizard-finish');
         if (finishBtn) {
             finishBtn.addEventListener('click', async () => { // Hacer la función async
                console.log("Intentando guardar torneo...");
                await saveTournamentToFirestore(); // Llamar a la función de guardado
            });
         }
    }


    // =================================================================================
    // INICIALIZACIÓN
    // =================================================================================
    updateAuthUI();
    showTournamentListView(); // Asegurar que la vista inicial de torneos sea la lista

});
</script>
</body>
</html>

